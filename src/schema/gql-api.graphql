scalar JSON

type AuthUser {
  user_id: ID!
  user_email: String!
  post: [GeTpost!]!
  role: AuthRole
}

type AuthRole {
  role_id: ID!
  role_name: String!
  role_description: String
  role_state: Int!
}

type AuthPermissions {
  permissions_id: ID!
  permissions_name: String!
  permissions_state: Int!
}

type AuthRolpermissions {
  rolpermissions_id: ID!
  permissions: AuthPermissions!
  role: AuthRole!
  rolpermissions_state: Int!
}

type GeTpost {
  post_id: ID!
  post_title: String!
  post_body: String
  user: AuthUser
}

type Microservices {
  id:            ID!
  name:          String!
  hostname:      String!              
  port:          Int!
  state:         Int!
}

input MicroservicesSend {
  name: String!
  query: String!
}

input MicroservicesInput {
  name:          String!
  hostname:      String!              
  port:          Int!
  state:         Int!
}

input SignUpInput {
  user_email: String!
  user_password: String!
}

input LoginInput {
  user_email: String!
  user_password: String!
}

input PostInput {
  post_title: String!
  post_body: String!
  user_id: Int!
}

input RoleInput {
  role_name: String!
  role_description: String!
}

type AuthPayload {
  user_id: ID!
  user_email: String!
}

type UserToken {
  token: String!
  user: AuthUser!
}

type MicroservicesResponse {
  status: String!
  response: JSON!
}

type MicroservicesRes {
  name:          String!
  hostname:      String!              
  port:          Int!
  state:         Int!
}

type PostModel {
  post: GeTpost!
}

type Query {
  post(id: ID!): GeTpost!
  posts: [GeTpost!]!
}

type Mutation {
  useMicroservice(input: MicroservicesSend): MicroservicesResponse!
  signup(input: SignUpInput): UserToken!
  login(input: LoginInput): UserToken!
  createPost(input: PostInput): GeTpost!
  createRol(input: RoleInput): AuthRole!
  createMicroservice(input: MicroservicesInput): MicroservicesRes
}